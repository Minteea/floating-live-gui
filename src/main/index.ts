import { app, BrowserWindow } from "electron";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const GUI_VITE_DEV_SERVER_URL: string;
declare const GUI_VITE_NAME: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

import { floating } from "./floating";

(global as any).floating = floating;

// 保持window对象的全局引用,避免JavaScript对象被垃圾回收时,窗口被自动关闭.
let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    titleBarStyle: "hidden",
    titleBarOverlay: {
      color: "#f0f2f5",
      symbolColor: "#001529",
    },
    webPreferences: {
      preload: path.join(__dirname, "preload.js"),
      webSecurity: false, // 是否禁用同源策略(上线时删除此配置)
    },
  });

  // and load the index.html of the app.
  if (GUI_VITE_DEV_SERVER_URL) {
    mainWindow.loadURL(GUI_VITE_DEV_SERVER_URL);
    console.log(GUI_VITE_DEV_SERVER_URL);
  } else {
    mainWindow.loadFile(
      path.join(__dirname, `../renderer/${GUI_VITE_NAME}/index.html`)
    );
  }

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  floating.command.execute("auth.read");
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

floating.command.register("devtools", () => {
  mainWindow?.webContents.openDevTools();
});
/*
program.command.add("setTitleBarOverlay", (value) => {
  mainWindow.setTitleBarOverlay(value)
})
*/
